{"version":3,"sources":["assets/leaf.png","firebase.js","Header.js","Form.js","List.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","onComment","event","firstForm","document","querySelector","commentButton","style","display","src","leaf","className","alt","onClick","this","Component","Form","onChange","name","target","value","setState","onNext","preventDefault","secondForm","undefined","player","recordedData","Swal","fire","onClose","window","confirm","record","reset","onSubmit","nameToBeAdded","state","guestName","commentToBeAdded","guestComment","videoToBeAdded","videos","database","ref","push","date","time","Date","hh","getHours","mm","getMinutes","h","dd","m","formatDate","now","timeStamp","video","videojs","videoNode","props","version_info","VERSION","getPluginVersion","RecordRTC","version","log","on","file","storageRef","storage","videoID","upload","child","put","newURLS","then","snapshot","getDownloadURL","url","bytesTransferred","totalBytes","TaskState","PAUSED","RUNNING","error","element","AOS","init","duration","dispose","icon","faTimes","data-vjs-player","id","node","playsInline","type","htmlFor","List","data-aos","listItems","map","item","i","key","width","height","controls","videoURL","Footer","App","commentCards","val","newComments","commentObject","uniqueID","fluid","plugins","audio","maxLength","debug","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42080cc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaf.59ff8a6c.png\";","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD4PAiUxCGZ58JoP9fkPlJ_yE4eVeKm4UM\",\r\n    authDomain: \"project-05-f1231.firebaseapp.com\",\r\n    databaseURL: \"https://project-05-f1231.firebaseio.com\",\r\n    projectId: \"project-05-f1231\",\r\n    storageBucket: \"project-05-f1231.appspot.com\",\r\n    messagingSenderId: \"589380734853\",\r\n    appId: \"1:589380734853:web:6f3cb4c64d4b7b86337eec\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport leaf from './assets/leaf.png';\r\n\r\nclass Header extends Component {\r\n\r\n    onComment = (event) => {\r\n        const firstForm = document.querySelector('.firstForm')\r\n        const commentButton = document.querySelector('.commentButton')\r\n\r\n        firstForm.style.display = 'flex';\r\n\r\n        if (firstForm.style.display === 'flex') {\r\n            commentButton.style.display = 'none';\r\n        } else {\r\n            commentButton.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <img src={leaf} className=\"left leaf\" alt=\"Green leaves in watercolor - positioned on the top left corner to frame the title.\" />\r\n                <img src={leaf} className=\"right leaf\" alt=\"Green leaves in watercolor - positioned on the bottom right corner to frame the title. \" />\r\n                <div className=\"button\">\r\n                    <button onClick={this.onComment} className=\"commentButton\"> Add Comment</button>\r\n                </div>\r\n                <div className=\"title\">\r\n                    <h1>Jack ‚ù§ Jill</h1>\r\n                    <h2>November 28th 2019</h2>\r\n                    <div className=\"instructions\">\r\n                        <p>Record a video with your well wishes, something funny, words of advice, or maybe date night ideas. When we look back we'll be reminded of all the people who helped celebrate our special day.</p>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport firebase from './firebase.js';\r\n// register videojs\r\nimport 'video.js/dist/video-js.css';\r\nimport videojs from 'video.js';\r\nimport 'webrtc-adapter';\r\nimport RecordRTC from 'recordrtc';\r\n// register videojs-record plugin with this import\r\nimport 'videojs-record/dist/css/videojs.record.css';\r\nimport Record from 'videojs-record/dist/videojs.record.js';\r\n// register fontawesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n// register sweetalerts2\r\nimport Swal from 'sweetalert2';\r\n// register animate on scroll\r\nimport AOS from 'aos';\r\nimport 'aos/dist/aos.css';\r\n\r\n\r\nclass Form extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            guestName: '',\r\n            guestComment: '',\r\n            timeStamp: '',\r\n            video: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // instantiate Video.js\r\n        this.player = videojs(this.videoNode, this.props, () => {\r\n            // print version information at startup\r\n            const version_info = 'Using video.js ' + videojs.VERSION +\r\n                ' with videojs-record ' + videojs.getPluginVersion('record') +\r\n                ' and recordrtc ' + RecordRTC.version;\r\n            videojs.log(version_info);\r\n        });\r\n\r\n        // device is ready\r\n        this.player.on('deviceReady', () => {\r\n        });\r\n\r\n        // user clicked the record button and started recording\r\n        this.player.on('startRecord', () => {\r\n        });\r\n\r\n        // user completed recording and stream is available\r\n        this.player.on('finishRecord', () => {\r\n            // recordedData is a blob object containing the recorded data that\r\n            // can be downloaded by the user, stored on server etc.\r\n\r\n            Swal.fire('', 'Thank you for your video! Please wait until the video is done uploading before clicking submit!', 'info')\r\n\r\n            const file = this.player.recordedData;\r\n            const storageRef = firebase.storage().ref();\r\n            const videoID = file.name;\r\n            const videoRef = storageRef.child('video/' + videoID);\r\n            const upload = videoRef.put(file);\r\n\r\n            const newURLS = [];\r\n            upload.then((snapshot) => {\r\n                snapshot.ref.getDownloadURL().then((url) => {\r\n                    newURLS.push(url);\r\n                });\r\n            });\r\n\r\n            upload.on('state_changed', function (snapshot) {\r\n                // Observe state change events such as progress, pause, and resume\r\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                // stretch goal: make progress bar\r\n                switch (snapshot.state) {\r\n                    case firebase.storage.TaskState.PAUSED:\r\n                        break;\r\n                    case firebase.storage.TaskState.RUNNING:\r\n                        break;\r\n                }\r\n            }, function (error) {\r\n                Swal.fire('', 'Video did not upload successfully.', 'error')\r\n            }, function () {\r\n                Swal.fire('', 'Video is done uploading. You may now click submit.', 'success')\r\n            });\r\n\r\n            this.setState({\r\n                videos: newURLS\r\n            })\r\n        });\r\n\r\n        // error handling\r\n        this.player.on('error', (element, error) => {\r\n        });\r\n        this.player.on('deviceError', () => {\r\n        });\r\n\r\n        // initialize animate on scroll\r\n        AOS.init({\r\n            duration: 1200,\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.player) {\r\n            this.player.dispose();\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onNext = (event) => {\r\n        event.preventDefault();\r\n        const firstForm = document.querySelector('.firstForm')\r\n        const secondForm = document.querySelector('.secondForm')\r\n\r\n        if (this.player.recordedData !== undefined) {\r\n            firstForm.style.display = 'none';\r\n            secondForm.style.display = 'flex';\r\n        } else {\r\n            Swal.fire('', 'No video recorded. Please try again.', 'warning');\r\n        }\r\n    }\r\n\r\n    onClose = (event) => {\r\n        const firstForm = document.querySelector('.firstForm')\r\n        const commentButton = document.querySelector('.commentButton')\r\n\r\n        if (this.player.recordedData === undefined) {\r\n            firstForm.style.display = 'none';\r\n            commentButton.style.display = 'block';\r\n        } else if (window.confirm('You recorded a video but have not submitted. Clicking ok will erase your video.') === true) {\r\n            firstForm.style.display = 'none';\r\n            commentButton.style.display = 'block';\r\n            this.player.record().reset();\r\n        }\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const nameToBeAdded = this.state.guestName;\r\n        const commentToBeAdded = this.state.guestComment;\r\n        const videoToBeAdded = this.state.videos;\r\n        const secondForm = document.querySelector('.secondForm')\r\n        const commentButton = document.querySelector('.commentButton')\r\n\r\n        const formatDate = function (date) {\r\n            const time = new Date(date);\r\n            const hh = time.getHours();\r\n            const mm = time.getMinutes();\r\n            let h = hh;\r\n            let dd = \"AM\";\r\n            let m = mm;\r\n            if (h >= 12) {\r\n                h = hh - 12;\r\n                dd = \"PM\";\r\n            }\r\n            if (h === 0) {\r\n                h = 12;\r\n            }\r\n            if (m < 10) {\r\n                m = \"0\" + mm;\r\n            }\r\n            return `${h}:${m} ${dd}`\r\n        }\r\n\r\n        if (this.player.recordedData !== undefined\r\n            && this.state.guestName !== ''\r\n            && this.state.guestComment !== '') {\r\n            firebase.database().ref().push({\r\n                'name': nameToBeAdded,\r\n                'comment': commentToBeAdded,\r\n                'time': formatDate(Date.now()),\r\n                'video': videoToBeAdded\r\n            })\r\n            this.setState({\r\n                guestName: '',\r\n                guestComment: '',\r\n                timeStamp: '',\r\n                video: this.player.record().reset()\r\n            })\r\n            secondForm.style.display = 'none';\r\n            commentButton.style.display = 'block';\r\n        } else {\r\n            Swal.fire('', 'One or more fields are empty.', 'warning')\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"forms\">\r\n                <form onSubmit={this.onNext} className=\"firstForm\">\r\n                    <FontAwesomeIcon icon={faTimes} className=\"close\" onClick={this.onClose} />\r\n                    <div className=\"recordVideo\">\r\n                        <p className=\"stepOne\"><span className=\"color\">Step 1:</span> Record a video message</p>\r\n                        <div data-vjs-player>\r\n                            <video id=\"myVideo\" ref={node => this.videoNode = node} className=\"video-js vjs-default-skin\" playsInline></video>\r\n                        </div>\r\n                        <button type=\"next\">Next</button>\r\n                    </div>\r\n                </form>\r\n                <form onSubmit={this.onSubmit} className=\"secondForm\">\r\n                    <div className=\"inputs\">\r\n                        <p className=\"stepTwo\"><span className=\"color\">Step 2:</span> Write a comment and sign your name</p>\r\n                        <label htmlFor=\"guestComment\">Message to the newly weds:</label>\r\n                        <textarea id=\"guestComment\" name=\"guestComment\" type=\"text\" onChange={this.onChange} value={this.state.guestComment} />\r\n                        <label htmlFor=\"guestName\">Signed:</label>\r\n                        <input id=\"guestName\" name=\"guestName\" type=\"text\" onChange={this.onChange} value={this.state.guestName} />\r\n                        <p className=\"stepThree\"><span className=\"color\">Step 3:</span> Submit</p>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './App.css'\r\n\r\nclass List extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"commentsSection\" data-aos=\"zoom-in\">\r\n                {this.props.listItems.map((item, i) => {\r\n                    return (\r\n                        <li key={i} className=\"commentCard\">\r\n                            <div className=\"videoComment\">\r\n                                <video width=\"320\" height=\"240\" controls>\r\n                                    <source src={item.videoURL} type=\"video/webm\" />\r\n                                </video>\r\n                            </div>\r\n                            <div className=\"writtenComment\">\r\n                                <p>{item.guestComment}</p>\r\n                                <p>‚Äî {item.guestName}</p>\r\n                                <p className=\"timeStamp\">{item.timeStamp}</p>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport './App.css'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p>Wedding Guestbook - Copyright ¬© 2019</p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport firebase from './firebase.js';\r\n// import components\r\nimport Header from './Header.js';\r\nimport Form from './Form.js';\r\nimport List from './List.js';\r\nimport Footer from './Footer.js'\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      commentCards: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (snapshot) => {\r\n      const database = snapshot.val();\r\n\r\n      const newComments = [];\r\n      for (let key in database) {\r\n        const commentObject = {\r\n          uniqueID: key,\r\n          guestName: snapshot.child(key).child('name').val(),\r\n          guestComment: snapshot.child(key).child('comment').val(),\r\n          timeStamp: snapshot.child(key).child('time').val(),\r\n          videoURL: snapshot.child(key).child('video').child([0]).val()\r\n        }\r\n        newComments.push(commentObject);\r\n      }\r\n\r\n      this.setState({\r\n        commentCards: newComments\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const videoJsOptions = {\r\n      controls: true,\r\n      width: 320,\r\n      height: 240,\r\n      fluid: false,\r\n      plugins: {\r\n        record: {\r\n          audio: true,\r\n          video: true,\r\n          maxLength: 10,\r\n          debug: true\r\n        }\r\n      }\r\n    };\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Form {...videoJsOptions} />\r\n        <List listItems={this.state.commentCards} />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}